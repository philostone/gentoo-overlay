diff --git a/src/lxterminal.c b/src/lxterminal.c
index 015f5e4..70188ec 100644
--- a/src/lxterminal.c
+++ b/src/lxterminal.c
@@ -44,6 +44,9 @@
 #include "preferences.h"
 #include "unixsocket.h"
 
+/* command line config hack, declared external in settings.h */
+gchar * cmdline_config = NULL;
+
 /* Utilities. */
 static void terminal_get_border(Term * term, GtkBorder * border);
 static void terminal_save_size(LXTerminal * terminal);
@@ -114,6 +117,7 @@ static gchar usage_display[] = {
     "  lxterminal [Options...] - LXTerminal is a terminal emulator\n\n"
     "Options:\n"
     "  -e, --command=STRING             Execute the argument to this option inside the terminal\n"
+    "  -c, --config=FNAME               Use file FNAME instead of user or system default\n"
     "  --geometry=COLUMNSxROWS          Set the terminal's size\n"
     "  -l, --loginshell                 Execute login shell\n"
     "  -t, -T, --title=,\n"
@@ -1457,6 +1461,20 @@ gboolean lxterminal_process_arguments(gint argc, gchar * * argv, CommandArgument
             cmd_len ++;
         }
 
+	/* --config=<fname> */
+        else if (strncmp(argument, "--config=", 9) == 0)
+        {
+            cmdline_config = &argument[9];
+            printf("lxterminal, --config='%s'\n", cmdline_config);
+        }
+        else if ((strcmp, "--config") == 0 || (strcmp(argument, "-c") == 0))
+        {
+            argc --;
+            argv_cursor ++;
+            cmdline_config = *argv_cursor;
+            printf("lxterminal, -c|--config '%s'\n", cmdline_config);
+        }
+
         /* --geometry=<columns>x<rows> */
         else if (strncmp(argument, "--geometry=", 11) == 0)
         {
@@ -1528,7 +1546,7 @@ gboolean lxterminal_process_arguments(gint argc, gchar * * argv, CommandArgument
         else {
             printf("%s\n", usage_display);
             return FALSE;
-    }
+        }
     }
     /* Handle --loginshell. */
     if (arguments->command != NULL && cmd_len <= 2) {
diff --git a/src/lxterminal.h b/src/lxterminal.h
index 328c743..15e7304 100644
--- a/src/lxterminal.h
+++ b/src/lxterminal.h
@@ -79,6 +79,7 @@ typedef struct _term {
 typedef struct _command_arguments {
     char * executable;              /* Value of argv[0]; points into argument vector */
     gchar * * command;              /* Value of -e, --command; memory allocated by glib */
+    gchar * config;                 /* Value of -c, --config; points into argument vector */
     int geometry_bitmask;
     unsigned int geometry_columns;           /* Value of --geometry */
     unsigned int geometry_rows;
diff --git a/src/setting.c b/src/setting.c
index 2763273..16fc03d 100644
--- a/src/setting.c
+++ b/src/setting.c
@@ -169,6 +169,13 @@ void set_setting(Setting * new_setting)
 /* Save settings to configuration file. */
 void save_setting()
 {
+    /* do not save to command line config */
+    if ( cmdline_config != NULL )
+    {
+        printf("lxterminal, no saving of potentially altered config settings to command line config file\n");
+        return;
+    }
+
     int i;
     g_return_if_fail (setting != NULL);
     //print_setting();
@@ -333,16 +340,35 @@ Setting * load_setting()
     gchar * user_config_path = g_build_filename(dir, "lxterminal.conf", NULL);
     g_free(dir);
     gchar * system_config_path = g_strdup(PACKAGE_DATA_DIR "/lxterminal/lxterminal.conf");
-    gchar * config_path = user_config_path;
+/*    gchar * config_path = user_config_path; */
+    printf("lxterminal, load_setting() - in priority order if existing\n");
+    printf("lxterminal, load_setting() - cmdline_config '%s'\n", cmdline_config);
+    printf("lxterminal, load_setting() - user_config    '%s'\n", user_config_path);
+    printf("lxterminal, load_setting() - system config  '%s'\n", system_config_path);
+    gchar * config_path = (cmdline_config) ?: user_config_path;
     
     gboolean need_save = FALSE;
 
+    if ( cmdline_config && ! g_file_test(cmdline_config, G_FILE_TEST_EXISTS))
+    {
+        /* invalid config file provided, try user config! */
+        printf("lxterminal, load_setting() - invalid cmdline_config '%s', ignoring!\n", cmdline_config);
+        config_path = user_config_path;
+    }
     if ( ! g_file_test(user_config_path, G_FILE_TEST_EXISTS))
     {
         /* Load system-wide settings. */
         config_path = system_config_path;
         need_save = TRUE;
     }
+    printf("lxterminal, using ");
+    if ( cmdline_config && (config_path == cmdline_config) )
+        printf("command line ");
+    else if ( config_path == user_config_path )
+        printf("user ");
+    else
+        printf("system ");
+    printf("config '%s'\n", config_path);
 
     /* Allocate structure. */
     setting = g_slice_new0(Setting);
@@ -551,4 +577,3 @@ color_preset_does_not_exist:
     //print_setting();
     return setting;
 }
-
diff --git a/src/setting.h b/src/setting.h
index e458d14..b7b28d0 100644
--- a/src/setting.h
+++ b/src/setting.h
@@ -82,6 +82,9 @@
 #define ZOOM_RESET_ACCEL_DEF "<Primary><Shift>parenright"
 
 /* User preferences. */
+
+extern char *cmdline_config;    /* defined in lxterminal.c */
+
 typedef struct _setting {
 
     GKeyFile * keyfile;         /* Pointer to GKeyFile containing settings */
