diff --git a/src/lxterminal.c b/src/lxterminal.c
index 015f5e4..2c8589f 100644
--- a/src/lxterminal.c
+++ b/src/lxterminal.c
@@ -44,6 +44,9 @@
 #include "preferences.h"
 #include "unixsocket.h"
 
+/* command line config hack, declared external in settings.h */
+gchar *cmdline_config = NULL;
+
 /* Utilities. */
 static void terminal_get_border(Term * term, GtkBorder * border);
 static void terminal_save_size(LXTerminal * terminal);
@@ -114,6 +117,7 @@ static gchar usage_display[] = {
     "  lxterminal [Options...] - LXTerminal is a terminal emulator\n\n"
     "Options:\n"
     "  -e, --command=STRING             Execute the argument to this option inside the terminal\n"
+    "  -c, --config=FNAME               Use file FNAME instead of user or system default\n"
     "  --geometry=COLUMNSxROWS          Set the terminal's size\n"
     "  -l, --loginshell                 Execute login shell\n"
     "  -t, -T, --title=,\n"
@@ -1457,6 +1461,29 @@ gboolean lxterminal_process_arguments(gint argc, gchar * * argv, CommandArgument
             cmd_len ++;
         }
 
+	/* --config=<fname> */
+        else if (strncmp(argument, "--config=", 9) == 0)
+        {
+            g_strfreev(arguments->config);
+            g_shell_parse_argv(&argument[9], &cmd_len, &arguments->config, NULL);
+            cmdline_config = arguments->config[0];
+        }
+        else if ((strcmp, "--config") == 0 || (strcmp(argument, "-c") == 0))
+        {
+            if (arguments->config != NULL) g_strfreev(arguments->config);
+            cmd_len = 0;
+            arguments->config = g_malloc(argc * sizeof(gchar *));
+            while (argc > 1)
+            {
+                argc--;
+                argv_cursor++;
+                arguments->config[cmd_len++] = g_strdup(*argv_cursor);
+            }
+            arguments->config[cmd_len] = NULL;
+            cmdline_config = arguments->config[0];
+            cmd_len = 0;
+        }
+
         /* --geometry=<columns>x<rows> */
         else if (strncmp(argument, "--geometry=", 11) == 0)
         {
@@ -1528,7 +1555,7 @@ gboolean lxterminal_process_arguments(gint argc, gchar * * argv, CommandArgument
         else {
             printf("%s\n", usage_display);
             return FALSE;
-    }
+        }
     }
     /* Handle --loginshell. */
     if (arguments->command != NULL && cmd_len <= 2) {
diff --git a/src/lxterminal.h b/src/lxterminal.h
index 328c743..d599160 100644
--- a/src/lxterminal.h
+++ b/src/lxterminal.h
@@ -79,6 +79,7 @@ typedef struct _term {
 typedef struct _command_arguments {
     char * executable;              /* Value of argv[0]; points into argument vector */
     gchar * * command;              /* Value of -e, --command; memory allocated by glib */
+    gchar * * config;               /* Value of -c, --config; memory allocated by glib */
     int geometry_bitmask;
     unsigned int geometry_columns;           /* Value of --geometry */
     unsigned int geometry_rows;
diff --git a/src/setting.c b/src/setting.c
index 2763273..5033e85 100644
--- a/src/setting.c
+++ b/src/setting.c
@@ -333,10 +333,17 @@ Setting * load_setting()
     gchar * user_config_path = g_build_filename(dir, "lxterminal.conf", NULL);
     g_free(dir);
     gchar * system_config_path = g_strdup(PACKAGE_DATA_DIR "/lxterminal/lxterminal.conf");
-    gchar * config_path = user_config_path;
+/*    gchar * config_path = user_config_path; */
+    gchar * config_path = cmdline_config;
     
     gboolean need_save = FALSE;
 
+    if ( ! g_file_test(cmdline_config, G_FILE_TEST_EXISTS))
+    {
+        /* invalid config file provided, try user config! */
+        config_path = user_config_path;
+    }
+
     if ( ! g_file_test(user_config_path, G_FILE_TEST_EXISTS))
     {
         /* Load system-wide settings. */
diff --git a/src/setting.h b/src/setting.h
index e458d14..b7b28d0 100644
--- a/src/setting.h
+++ b/src/setting.h
@@ -82,6 +82,9 @@
 #define ZOOM_RESET_ACCEL_DEF "<Primary><Shift>parenright"
 
 /* User preferences. */
+
+extern char *cmdline_config;    /* defined in lxterminal.c */
+
 typedef struct _setting {
 
     GKeyFile * keyfile;         /* Pointer to GKeyFile containing settings */
